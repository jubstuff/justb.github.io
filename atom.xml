<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Little Right's Journal]]></title>
  <link href="http://JustB.github.io/atom.xml" rel="self"/>
  <link href="http://JustB.github.io/"/>
  <updated>2014-01-29T23:32:47+01:00</updated>
  <id>http://JustB.github.io/</id>
  <author>
    <name><![CDATA[Giustino Borzacchiello]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Working With Strongloop's Loopback]]></title>
    <link href="http://JustB.github.io/blog/2014/01/17/working-with-strongloops-loopback/"/>
    <updated>2014-01-17T12:24:18+01:00</updated>
    <id>http://JustB.github.io/blog/2014/01/17/working-with-strongloops-loopback</id>
    <content type="html"><![CDATA[<p>So I am working with Loopback by Strongloop.</p>

<h2>Creating models</h2>

<p>To create a model, you simply place a .js file in the models folder. After calling app.boot, loopback will load all .js
files automatically. But how to reference those models?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">//models/product.js</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">Model</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;loopback&#39;</span><span class="p">).</span><span class="nx">Model</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">Product</span> <span class="o">=</span> <span class="nx">Model</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="s1">&#39;product&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">//Anywhere else</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">loopback</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;loopback&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">Product</span> <span class="o">=</span> <span class="nx">loopback</span><span class="p">.</span><span class="nx">getModel</span><span class="p">(</span><span class="s1">&#39;product&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Connecting to a MongoDb Database</h2>

<p>To create a connection with a mongodb database (or for any other datasource, just replace mongo with its name), you have
several choices.</p>

<p>First, you can create it programmatically, using the <code>loopback.createDataSource</code> method. This method accepts a
JavaScript object with these properties:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">loopback</span><span class="p">.</span><span class="nx">createDataSource</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">connector</span><span class="o">:</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;loopback-connector-mongodb&#39;</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">host</span><span class="o">:</span> <span class="mf">127.0</span><span class="p">.</span><span class="mf">0.1</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">port</span><span class="o">:</span> <span class="mi">27017</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">database</span><span class="o">:</span> <span class="s1">&#39;myDatabaseName&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">username</span><span class="o">:</span> <span class="s1">&#39;myDatabaseUser&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">password</span><span class="o">:</span> <span class="s1">&#39;myPassword&#39;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Otherwise, you can specify your datasource in the <code>datasources.json</code> file in the root directory</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;db&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;defaultForType&quot;</span><span class="o">:</span> <span class="s2">&quot;db&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;connector&quot;</span><span class="o">:</span> <span class="s2">&quot;mongodb&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;host&quot;</span><span class="o">:</span> <span class="mf">127.0</span><span class="p">.</span><span class="mf">0.1</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;port&quot;</span><span class="o">:</span> <span class="mi">27017</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;database&quot;</span><span class="o">:</span> <span class="s1">&#39;myDatabaseName&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;username&quot;</span><span class="o">:</span> <span class="s1">&#39;myDatabaseUser&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;password&quot;</span><span class="o">:</span> <span class="s1">&#39;myPassword&#39;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What I Learned Today - 14/01/2014]]></title>
    <link href="http://JustB.github.io/blog/2014/01/14/what-i-learned-today-14-slash-01-slash-2014/"/>
    <updated>2014-01-14T01:59:10+01:00</updated>
    <id>http://JustB.github.io/blog/2014/01/14/what-i-learned-today-14-slash-01-slash-2014</id>
    <content type="html"><![CDATA[<p>Today has been a good day. This morning I decided that I would begin my training as a runner. I ran for 10 minutes! (Yes, I&rsquo;m unfit. Sigh.).</p>

<p>Anyway, this is not an health blog, but a programming one (I hope). So let&rsquo;s see what I learned today!</p>

<!--more-->


<h3>Smarty: dump variable and verbatim text</h3>

<p>So I got this job, and I have to use Smarty. I know, I know, it&rsquo;s so 2000. But hey, it&rsquo;s work. I needed to dump some variables for a quick analysis. This is how it is done:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='smarty'><span class='line'><span class="cp">{</span> <span class="nv">$variable</span> <span class="o">|</span> <span class="na">print_r</span> <span class="cp">}</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Simple enough. Next, there where some errors regarding (brr) inline JavaScript. The { } where being processed by Smarty. They needed to be passed unfiltered. This is done using the <code>{literal}</code> tag:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='smarty'><span class='line'><span class="cp">{</span><span class="nf">literal</span><span class="cp">}</span><span class="x"></span>
</span><span class='line'><span class="x">&lt;script&gt;</span>
</span><span class='line'><span class="x">function foo() </span><span class="cp">{</span>
</span><span class='line'>  <span class="na">console</span><span class="o">.</span><span class="na">log</span><span class="o">(</span><span class="s1">&#39;bar&#39;</span><span class="o">);</span>
</span><span class='line'><span class="cp">}</span><span class="x"></span>
</span><span class='line'><span class="x">&lt;/script&gt;</span>
</span><span class='line'><span class="cp">{</span><span class="nf">/literal</span><span class="cp">}</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h3>Copy text in the clipboard using Ruby in Linux</h3>

<p>I created this blog using Octopress. To create a new post you have to issue <code>rake new_post['post title']</code>.
Usually the filename is some mix of date and the title you typed. After creating the post you need to open it in Vim (or your favourite editor).
So I modified the rake task to copy the filename in the clipboard, so that I don&rsquo;t have to type it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="s2">&quot;Creating new post: </span><span class="si">#{</span><span class="n">filename</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="nb">system</span><span class="p">(</span><span class="s2">&quot;echo &#39;</span><span class="si">#{</span><span class="n">filename</span><span class="si">}</span><span class="s2">&#39; | xclip&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>You have to install the <code>xclip</code> package.</p>

<h3>Cancel last search highlight in Vim</h3>

<p>I hate it! <code>:set nohlsearch</code> FTW!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What I Learned Today - 12/01/2014 Edition]]></title>
    <link href="http://JustB.github.io/blog/2014/01/13/what-i-learned-today-12-slash-01-slash-2014-edition/"/>
    <updated>2014-01-13T00:36:12+01:00</updated>
    <id>http://JustB.github.io/blog/2014/01/13/what-i-learned-today-12-slash-01-slash-2014-edition</id>
    <content type="html"><![CDATA[<p>Today was a strange day. I took the resolution to install again Linux on my work laptop, after a year or so of <em>Windows only</em>.
&ldquo;Why did you do <strong>that</strong>?&rdquo; you could ask. I don&rsquo;t know.</p>

<p>Maybe because I needed Photoshop for my previous work. I don&rsquo;t know.
I&rsquo;ve learned much, though. I&rsquo;ve pushed the Windows development environment to the limit but, simple as that, I&rsquo;m not a Windows guy.</p>

<p>Just two minutes into my Linux environment and I felt home.</p>

<p>Anyway, what I learned today? (that&rsquo;s a rhyme!)</p>

<!--more-->


<h3>Accept merge conflicts as a whole (local/remote)</h3>

<p>It&rsquo;s as simple as</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git checkout --theirs /path/to/file</span></code></pre></td></tr></table></div></figure>


<p>or</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git checkout --ours /path/to/file</span></code></pre></td></tr></table></div></figure>


<p><a href="http://stackoverflow.com/questions/6650215/how-to-keep-the-local-file-or-the-remote-file-during-merge-using-git-and-the-com">Source</a></p>

<h3>Executing a command in Puppet in a specific directory</h3>

<p>Do you want to execute a command with puppet, but you need it to run from a specific folder?</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>exec { command:
</span><span class='line'>  cwd =&gt; "path/to/folder"
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p><a href="http://docs.puppetlabs.com/references/latest/type.html#exec">Puppet exec documentation</a></p>

<h2>Sites, Apps, Services, Videos</h2>

<ul>
<li><a href="http://markdalgleish.com/projects/bespoke.js/">Bespoke.js</a>: a wonderful presentation framework written in JavaScript.</li>
<li><a href="http://www.youtube.com/watch?v=L0pjVcIsU6A">Node.js explained</a>: an introduction to Node.js. I really liked it! Very concise, but also informative.</li>
<li><a href="http://apidocjs.com/">apiDoc</a>: npm package to generate documentation for RESTful web APIs.</li>
<li><a href="http://build-podcast.com/">Build podcasts</a>: an on-going series of podcasts on web development tools.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Project Euler - Problem 1]]></title>
    <link href="http://JustB.github.io/blog/2013/10/13/project-euler-problem-1/"/>
    <updated>2013-10-13T21:03:00+02:00</updated>
    <id>http://JustB.github.io/blog/2013/10/13/project-euler-problem-1</id>
    <content type="html"><![CDATA[<p>Today I started to solve the Project Euler problems. I don&rsquo;t know how much time I can spend solving these problems, but I hope to complete the <em>quest</em> in the span of a lifetime :).</p>

<p>So here is the first problem:</p>

<blockquote><p>If we list all the natural numbers below 10 that are multiples of 3 and 5, we get 3, 5, 6, 9. The sum of these multiples is 23.</p><p>Find the sum of all the multiples of 3 and 5 below 1000.</p><footer><strong>Problem 1 - Project Euler</strong></footer></blockquote>


<!--more-->


<p>The first try I could think of, was the obvious brute force approach. Cycle through all the numbers, and sum them up if they are multiples of 3 or 5:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sum = 0
</span><span class='line'>for n in 1..1000
</span><span class='line'>    if n % 3 == 0 || n % 5 == 0 then
</span><span class='line'>        sum += n</span></code></pre></td></tr></table></div></figure>


<p>This worked but I wasn&rsquo;t too satisfied: it was way too simple. So I started to think of a possible alternate solution.</p>

<p>I thought to loop through the multiples of 3 and 5 at the same time, having two variables to hold the partial result. Something like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>n3 = n5 = 0
</span><span class='line'>sum = 0
</span><span class='line'>while n3 &lt; 1000
</span><span class='line'>    n3 += 3
</span><span class='line'>    n5 += 5
</span><span class='line'>    sum += n3 + n5</span></code></pre></td></tr></table></div></figure>


<p>Well, in my defense, it seemed like a good idea&hellip;but it misses completely the solution. Time to move on.</p>

<p>What would you do when you have to think about a problem? The answer is obvious: take a shower. And it worked!</p>

<h2>The shower solution</h2>

<p>So what does the shower told me? Let&rsquo;s assume that we have to find the sum of all the multiples of 3 and 5 below 20, to keep the math simple.</p>

<p>These multiples are:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>3+5+6+9+10+12+15+18</span></code></pre></td></tr></table></div></figure>


<p>that sum up to 78. Let&rsquo;s split them up in multiples of 3 and multiples of 5:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Multiples of 3: 
</span><span class='line'>3+6+9+12+15+18 = 63
</span><span class='line'>
</span><span class='line'>Multiples of 5: 
</span><span class='line'>5+10+15 = 30</span></code></pre></td></tr></table></div></figure>


<p>But we could look at those like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>3 * (1+2+3+4+5+6) = 63
</span><span class='line'>
</span><span class='line'>5 * (1+2+3) = 30</span></code></pre></td></tr></table></div></figure>


<p>Start to see the pattern? If we could just find the sum of the first <code>N</code> natural numbers, we could find the sum just with simple multiplications. But we can! Here&rsquo;s how:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Sum of the first N numbers
</span><span class='line'>
</span><span class='line'>N*(N+1)/2</span></code></pre></td></tr></table></div></figure>


<p>So we could write:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>3 * 6 * 7 / 2 = 63
</span><span class='line'>
</span><span class='line'>5 * 3 * 4 / 2 = 30</span></code></pre></td></tr></table></div></figure>


<h2>Problems, always problems</h2>

<p>I hear you: <em>&ldquo;But 63+30 isn&rsquo;t 78!&rdquo;</em>. Right, where is the problem? The problem is that we are including the number <code>15</code> twice. We have to subtract this number from the total to have the correct solution:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>3 * 6 * 7 / 2  = 63
</span><span class='line'>                 +
</span><span class='line'>5 * 3 * 4 / 2  = 30
</span><span class='line'>                 -
</span><span class='line'>15 * 1 * 2 / 2 = 15
</span><span class='line'>               ------
</span><span class='line'>                 78</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Why is this? Because 15 = 5 * 3, so we have to consider this number and all its multiples only once (as it should count as a multiple of 3 <strong>or</strong> a multiple of 5).</p>

<p>Now we are very close to the alternate solution: there is just one more thing to consider: how do we get <code>N</code> to calculate the first <code>N</code> numbers? In our example we found the sum for the first 6 numbers for 3, the first 3 ones for 5 and 1 for 15. How did we find these values?</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>3 * (1+2+3+4+5+6) = 63 
</span><span class='line'>                    +   
</span><span class='line'>5 * (1+2+3)       = 30  
</span><span class='line'>                    -   
</span><span class='line'>15 * 1            = 15  
</span><span class='line'>                  ------
</span><span class='line'>                    78  </span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s very simple: we just have to divide the max value for the number and take the integer part of the result.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>20 / 3 = 6
</span><span class='line'>
</span><span class='line'>20 / 5 = 4
</span><span class='line'>
</span><span class='line'>20 / 15 = 1</span></code></pre></td></tr></table></div></figure>


<p>In the case of 5, we have to decrement by 1, because the max value is out of the range, that&rsquo;s why we got 3 instead of 4.</p>

<h2>Alternate solution</h2>

<p>So here is the alternate solution:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>n3 = 1000 / 3
</span><span class='line'>n5 = (1000 / 5) - 1
</span><span class='line'>n15 = (1000 / 15) 
</span><span class='line'>
</span><span class='line'>sum3 = 3 * n3 * (n3 + 1) / 2
</span><span class='line'>sum5 = 5 * n5 * (n5 + 1) / 2
</span><span class='line'>sum15 = 15 * n15 * (n15 + 1) / 2
</span><span class='line'>
</span><span class='line'>sum = sum3 + sum5 - sum15
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What I Learned Today - 13/10/2013 Edition]]></title>
    <link href="http://JustB.github.io/blog/2013/10/13/what-i-learned-13-10-2013/"/>
    <updated>2013-10-13T12:18:57+02:00</updated>
    <id>http://JustB.github.io/blog/2013/10/13/what-i-learned-13-10-2013</id>
    <content type="html"><![CDATA[<h2>Create a zip on the command line (simple edition)</h2>

<p>How to create a zip file in Linux? All the latest version of Ubuntu have an <em>Compress</em> entry in the contextual menu. But today I wanted to learn how to do it on the command line.</p>

<p>It turned out to be pretty simple:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>zip zipfile_name files_to_zip</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What I Learned Today - 12/10/2013 Edition]]></title>
    <link href="http://JustB.github.io/blog/2013/10/12/what-i-learned-today-11-slash-10-slash-2013-edition/"/>
    <updated>2013-10-12T17:50:03+02:00</updated>
    <id>http://JustB.github.io/blog/2013/10/12/what-i-learned-today-11-slash-10-slash-2013-edition</id>
    <content type="html"><![CDATA[<h2>So what I learned today?</h2>

<h3>Replace method in Python</h3>

<p>In Python you can use the <code>replace</code> method on strings to replace a part of it with another</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>In [3]: key = '/blobstore/quhab72=qaqerqfxbhr'
</span><span class='line'>In [4]: key.replace('/blobstore/', '')
</span><span class='line'>Out[4]: 'quhab72=qaqerqfxbhr'</span></code></pre></td></tr></table></div></figure>


<h3>Logging in AppEngine</h3>

<p>To have your debug logs appear in the console when you are running an AppEngine app in your development environment, just start the server with:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ dev_appserver.py --log_level=debug .</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Multiple Sums With Different Conditions in MySQL]]></title>
    <link href="http://JustB.github.io/blog/2012/12/17/multiple-sums-with-different-conditions-in-mysql/"/>
    <updated>2012-12-17T21:52:52+01:00</updated>
    <id>http://JustB.github.io/blog/2012/12/17/multiple-sums-with-different-conditions-in-mysql</id>
    <content type="html"><![CDATA[<p>Today I was working on my last project that involves some statistics on data. I had a table like this:</p>

<p><img class="center" src="http://JustB.github.io/images/tabella-1.png""></p>

<p>I needed the daily, monthly and yearly sum of the <code>value</code> field. How to do this?</p>

<!-- more -->


<p>The simplest approach was to have three different queries to retrieve the needed values:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="c1">--day</span>
</span><span class='line'><span class="k">SELECT</span> <span class="k">SUM</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'><span class="k">FROM</span> <span class="k">table</span>
</span><span class='line'><span class="k">WHERE</span> <span class="nb">DATE</span><span class="p">(</span><span class="n">time</span><span class="p">)</span><span class="o">=</span><span class="n">CURDATE</span><span class="p">();</span>
</span><span class='line'><span class="c1">-- month</span>
</span><span class='line'><span class="k">SELECT</span> <span class="k">SUM</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'><span class="k">FROM</span> <span class="k">table</span>
</span><span class='line'><span class="k">WHERE</span> <span class="k">MONTH</span><span class="p">(</span><span class="n">time</span><span class="p">)</span><span class="o">=</span><span class="k">MONTH</span><span class="p">(</span><span class="n">CURDATE</span><span class="p">())</span> <span class="k">AND</span> <span class="k">YEAR</span><span class="p">(</span><span class="n">time</span><span class="p">)</span><span class="o">=</span><span class="k">YEAR</span><span class="p">(</span><span class="n">CURDATE</span><span class="p">());</span>
</span><span class='line'><span class="c1">-- year</span>
</span><span class='line'><span class="k">SELECT</span> <span class="k">SUM</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'><span class="k">FROM</span> <span class="k">table</span>
</span><span class='line'><span class="k">WHERE</span> <span class="k">YEAR</span><span class="p">(</span><span class="n">time</span><span class="p">)</span><span class="o">=</span><span class="k">YEAR</span><span class="p">(</span><span class="n">CURDATE</span><span class="p">());</span>
</span></code></pre></td></tr></table></div></figure>


<p>But I wasn&rsquo;t satisfied. I wanted to have all three values using only one query. So I searched for this issue and this is the resulting query:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span>
</span><span class='line'>  <span class="k">SUM</span><span class="p">(</span><span class="k">CASE</span> <span class="k">WHEN</span> <span class="nb">DATE</span><span class="p">(</span><span class="n">time</span><span class="p">)</span><span class="o">=</span><span class="n">CURDATE</span><span class="p">()</span>
</span><span class='line'>    <span class="k">THEN</span> <span class="n">value</span>
</span><span class='line'>    <span class="k">ELSE</span> <span class="mi">0</span> <span class="k">end</span><span class="p">)</span> <span class="k">AS</span> <span class="n">value_day</span><span class="p">,</span>
</span><span class='line'>  <span class="k">SUM</span><span class="p">(</span><span class="k">CASE</span> <span class="k">WHEN</span> <span class="k">MONTH</span><span class="p">(</span><span class="n">time</span><span class="p">)</span><span class="o">=</span><span class="k">MONTH</span><span class="p">(</span><span class="n">CURDATE</span><span class="p">())</span> <span class="k">AND</span> <span class="k">YEAR</span><span class="p">(</span><span class="n">time</span><span class="p">)</span><span class="o">=</span><span class="k">YEAR</span><span class="p">(</span><span class="n">CURDATE</span><span class="p">())</span>
</span><span class='line'>    <span class="k">THEN</span> <span class="n">value</span>
</span><span class='line'>    <span class="k">ELSE</span> <span class="mi">0</span> <span class="k">end</span><span class="p">)</span> <span class="k">AS</span> <span class="n">value_month</span><span class="p">,</span>
</span><span class='line'>  <span class="k">SUM</span><span class="p">(</span><span class="k">CASE</span> <span class="k">WHEN</span> <span class="k">YEAR</span><span class="p">(</span><span class="n">time</span><span class="p">)</span><span class="o">=</span><span class="k">YEAR</span><span class="p">(</span><span class="n">CURDATE</span><span class="p">())</span>
</span><span class='line'>    <span class="k">THEN</span> <span class="n">value</span>
</span><span class='line'>    <span class="k">ELSE</span> <span class="mi">0</span> <span class="k">end</span><span class="p">)</span> <span class="k">AS</span> <span class="n">value_year</span>
</span><span class='line'><span class="k">FROM</span> <span class="k">table</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using the CASE construct, we increment independently the three values so that each row that satisfies the condition gets summed up.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bob Martin's Three Laws of TDD]]></title>
    <link href="http://JustB.github.io/blog/2012/09/15/bob-martin-three-laws-TDD/"/>
    <updated>2012-09-15T11:00:21+02:00</updated>
    <id>http://JustB.github.io/blog/2012/09/15/bob-martin-three-laws-TDD</id>
    <content type="html"><![CDATA[<blockquote><p>1. Do not write production code unless it is to make a failing unit test pass.<br/> 2. Do not write more of a unit test than is sufficient to fail, and build failures are failures.<br/> 3. Do not write more production code than is sufficient to pass the one failing unit test.</p><p>Even though this sounds restrictive, it is a very productive and fun way to develop software.</p><footer><strong>Bob Martin</strong> <cite><a href='http://butunclebob.com/ArticleS.UncleBob.TheThreeRulesOfTdd'>butunclebob.com/&hellip;</a></cite></footer></blockquote>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On Software Inventory]]></title>
    <link href="http://JustB.github.io/blog/2012/07/12/on-software-inventory/"/>
    <updated>2012-07-12T12:18:57+02:00</updated>
    <id>http://JustB.github.io/blog/2012/07/12/on-software-inventory</id>
    <content type="html"><![CDATA[<p>Few days ago Joel Spolsky published a post on his blog from the title: <a href="http://www.joelonsoftware.com/items/2012/07/09.html">&ldquo;Software Inventory&rdquo;</a>.
In this post, he associates &ldquo;inventory costs&rdquo; to software, just like a traditional factory. Spolsky highlights these points where inventory piles up:</p>

<ul>
<li>Feature backlogs</li>
<li>Bug backlogs</li>
<li>Undeployed features</li>
</ul>


<p>After reading his analysis, I thought that the very difference between baking bread and developing software is the <strong>absence of phisicity</strong>.
Having thousands of ounces of flour is very different from having a thousands more lines of code in a file.
Even if they could have the same cost of management.</p>

<p>What can be the solution, then? We need to make the invisible, visible, and material what is immaterial.
All the things that slow down the development process <strong>must hurt</strong> and be always visible, just like the flour should be stocked in the factory offices.</p>

<p>So, I like the idea that moves <a href="https://trello.com/">Trello</a>, the project manager developed by <a href="http://www.fogcreek.com">Fog Creek</a></p>

<blockquote>
  Trello works great for a reasonable amount of inventory, but it <strong>intentionally</strong>
starts to get klunky if you have too many cards in one list.
</blockquote>


<p>Just like a crowded desk, Trello is difficult to manage if there are too many cards.</p>

<p>In the end, there are advantages in the absence of phisicity, but we must consider the hidden costs that very often are ignored.</p>
]]></content>
  </entry>
  
</feed>
