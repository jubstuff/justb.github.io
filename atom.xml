<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Jub's Stuff]]></title>
  <link href="http://JustB.github.io/atom.xml" rel="self"/>
  <link href="http://JustB.github.io/"/>
  <updated>2013-09-21T14:20:13+02:00</updated>
  <id>http://JustB.github.io/</id>
  <author>
    <name><![CDATA[Giustino Borzacchiello]]></name>
    
  </author>

  
  <entry>
    <title type="html"><![CDATA[Multiple Sums with different conditions in MySQL]]></title>
    <link href="http://JustB.github.io/multiple-sums-with-different-conditions-in-mysql/"/>
    <updated>2013-09-21T15:48:38+02:00</updated>
    <id>http://JustB.github.io/multiple-sums-with-different-conditions-in-mysql</id>
    <content type="html"><![CDATA[<p>Today I was working on my last project that involves some statistics on data. I had a table like this:</p>

<p><img class="center" src="http://JustB.github.io/images/tabella-1.png""></p>

<p>I needed the daily, monthly and yearly sum of the <code>value</code> field. How to do this?</p>

<!-- more -->


<p>The simplest approach was to have three different queries to retrieve the needed values:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="c1">--day</span>
</span><span class='line'><span class="k">SELECT</span> <span class="k">SUM</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'><span class="k">FROM</span> <span class="k">table</span>
</span><span class='line'><span class="k">WHERE</span> <span class="nb">DATE</span><span class="p">(</span><span class="n">time</span><span class="p">)</span><span class="o">=</span><span class="n">CURDATE</span><span class="p">();</span>
</span><span class='line'><span class="c1">-- month</span>
</span><span class='line'><span class="k">SELECT</span> <span class="k">SUM</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'><span class="k">FROM</span> <span class="k">table</span>
</span><span class='line'><span class="k">WHERE</span> <span class="k">MONTH</span><span class="p">(</span><span class="n">time</span><span class="p">)</span><span class="o">=</span><span class="k">MONTH</span><span class="p">(</span><span class="n">CURDATE</span><span class="p">())</span> <span class="k">AND</span> <span class="k">YEAR</span><span class="p">(</span><span class="n">time</span><span class="p">)</span><span class="o">=</span><span class="k">YEAR</span><span class="p">(</span><span class="n">CURDATE</span><span class="p">());</span>
</span><span class='line'><span class="c1">-- year</span>
</span><span class='line'><span class="k">SELECT</span> <span class="k">SUM</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'><span class="k">FROM</span> <span class="k">table</span>
</span><span class='line'><span class="k">WHERE</span> <span class="k">YEAR</span><span class="p">(</span><span class="n">time</span><span class="p">)</span><span class="o">=</span><span class="k">YEAR</span><span class="p">(</span><span class="n">CURDATE</span><span class="p">());</span>
</span></code></pre></td></tr></table></div></figure>


<p>But I wasn&rsquo;t satisfied. I wanted to have all three values using only one query. So I searched for this issue and this is the resulting query:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span>
</span><span class='line'>  <span class="k">SUM</span><span class="p">(</span><span class="k">CASE</span> <span class="k">WHEN</span> <span class="nb">DATE</span><span class="p">(</span><span class="n">time</span><span class="p">)</span><span class="o">=</span><span class="n">CURDATE</span><span class="p">()</span>
</span><span class='line'>    <span class="k">THEN</span> <span class="n">value</span>
</span><span class='line'>    <span class="k">ELSE</span> <span class="mi">0</span> <span class="k">end</span><span class="p">)</span> <span class="k">AS</span> <span class="n">value_day</span><span class="p">,</span>
</span><span class='line'>  <span class="k">SUM</span><span class="p">(</span><span class="k">CASE</span> <span class="k">WHEN</span> <span class="k">MONTH</span><span class="p">(</span><span class="n">time</span><span class="p">)</span><span class="o">=</span><span class="k">MONTH</span><span class="p">(</span><span class="n">CURDATE</span><span class="p">())</span> <span class="k">AND</span> <span class="k">YEAR</span><span class="p">(</span><span class="n">time</span><span class="p">)</span><span class="o">=</span><span class="k">YEAR</span><span class="p">(</span><span class="n">CURDATE</span><span class="p">())</span>
</span><span class='line'>    <span class="k">THEN</span> <span class="n">value</span>
</span><span class='line'>    <span class="k">ELSE</span> <span class="mi">0</span> <span class="k">end</span><span class="p">)</span> <span class="k">AS</span> <span class="n">value_month</span><span class="p">,</span>
</span><span class='line'>  <span class="k">SUM</span><span class="p">(</span><span class="k">CASE</span> <span class="k">WHEN</span> <span class="k">YEAR</span><span class="p">(</span><span class="n">time</span><span class="p">)</span><span class="o">=</span><span class="k">YEAR</span><span class="p">(</span><span class="n">CURDATE</span><span class="p">())</span>
</span><span class='line'>    <span class="k">THEN</span> <span class="n">value</span>
</span><span class='line'>    <span class="k">ELSE</span> <span class="mi">0</span> <span class="k">end</span><span class="p">)</span> <span class="k">AS</span> <span class="n">value_year</span>
</span><span class='line'><span class="k">FROM</span> <span class="k">table</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using the CASE construct, we increment independently the three values so that each row that satisfies the condition gets summed up.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bob Martin’s Three Laws of TDD]]></title>
    <link href="http://JustB.github.io/bob-martin-three-laws-TDD/"/>
    <updated>2012-09-15T11:00:21+02:00</updated>
    <id>http://JustB.github.io/bob-martin-three-laws-TDD</id>
    <content type="html"><![CDATA[<blockquote><p>1. Do not write production code unless it is to make a failing unit test pass.<br/> 2. Do not write more of a unit test than is sufficient to fail, and build failures are failures.<br/> 3. Do not write more production code than is sufficient to pass the one failing unit test.</p><p>Even though this sounds restrictive, it is a very productive and fun way to develop software.</p><footer><strong>Bob Martin</strong> <cite><a href='http://butunclebob.com/ArticleS.UncleBob.TheThreeRulesOfTdd'>butunclebob.com/&hellip;</a></cite></footer></blockquote>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On Software Inventory]]></title>
    <link href="http://JustB.github.io/on-software-inventory/"/>
    <updated>2012-07-12T00:00:00+02:00</updated>
    <id>http://JustB.github.io/on-software-inventory</id>
    <content type="html"><![CDATA[<p>Few days ago Joel Spolsky published a post on his blog from the title: <a href="http://www.joelonsoftware.com/items/2012/07/09.html">&ldquo;Software Inventory&rdquo;</a>.
In this post, he associates &ldquo;inventory costs&rdquo; to software, just like a traditional factory. Spolsky highlights these points where inventory piles up:</p>

<ul>
<li>Feature backlogs</li>
<li>Bug backlosh</li>
<li>Undeployed features</li>
</ul>


<p>After reading his analysis, I thought that the very difference between baking bread and developing software is the <strong>absence of phisicity</strong>.
Having thousands of ounces of flour is very different from having a thousands lines of code more in a file.
Even if they could have the same cost of management.</p>

<p>What can be the solution, then? We need to make the invisible, visible, and material what is immaterial.
All the things that slow down the development process <strong>must hurt</strong></p>

<p>Quale può essere la soluzione dunque? Bisogna rendere visibile l&#8217;invisibile, e materiale ciò che è immateriale. Tutto quello che danneggia e rallenta il processo di sviluppo deve <em>far male</em> ed essere sempre e costantemente sotto gli occhi, così come la farina in esubero andrebbe stoccata negli uffici dei dipendenti.</p>

<p>Mi piace quindi l&#8217;idea alla base di <a href="https://trello.com/">Trello</a>, il project manager sviluppato dalla sua <a href="http://www.fogcreek.com/">Fog Creek</a>:</p>

<blockquote>
  Trello works great for a reasonable amount of inventory, but it <strong>intentionally</strong>
starts to get klunky if you have too many cards in one list. 
</blockquote>


<p>Come su una scrivania affollata, Trello diventa difficoltoso da gestire se ci
sono troppe cose da fare.</p>

<p>In fin dei conti se ci sono dei vantaggi nell&#8217;immaterialità dell&#8217;industria del software, bisogna anche tenere conto dei costi nascosti che molto spesso vengono ignorati.</p>
]]></content>
  </entry>
  
</feed>
